<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 接口全限定名要与映射文件的namespace保持一致 -->
<mapper namespace="com.hr.mapper.EmpDeptMapper">

	<!-- <resultMap>: 自定义映射：处理复杂的表关系 <id column="eid" property="eid"/> :设置主键的映射关系，column：设置字段名，property:设置属性名 
		<result column="ename" property="ename"/>: 设置非主键的映射关系 -->
	<!-- <resultMap type="Emp" id="empMap"> 设置主键的映射关系 <id column="eid" property="eid"/> 
		<result column="ename" property="ename"/> <result column="age" property="age"/> 
		<result column="sex" property="sex"/> <result column="did" property="dept.did"/> 
		<result column="dname" property="dept.dname"/> </resultMap> -->

	<resultMap type="Emp" id="empMap">
		<!-- 设置主键的映射关系 -->
		<id column="eid" property="eid" />
		<!-- column="ename"：查询数据库表中的ename, property="ename"赋值给Emp对象中的ename属性-->
		<result column="ename" property="ename" />
		<result column="age" property="age" />
		<result column="sex" property="sex" />
		<!-- 处理多对一和一对一的映射关系, property="dept"：对应的是Emp对象中的属性名（因为EmpBean中有dept属性，但是表中没有，没有办法直接映射）javaType="Dept"：对应的是java类型，因为设置了别名，所以可以写Dept -->
		<association property="dept" javaType="Dept">
			<id column="did" property="did" />
			<result column="dname" property="dname" />
		</association>
	</resultMap>
	<!-- List<Emp> getAllEmp(); -->
	<select id="getAllEmp" resultMap="empMap">
		select
		e.eid,e.ename,e.age,e.sex,e.did,d.dname from emp e left join dept d on
		e.did = d.did
	</select>
	
	<!-- 分步查询测试多对一 -->
	<!-- 
		<resultMap>:自定义映射，处理复杂的表关系
	 -->
	 <resultMap type="Emp" id="empMapStep">
	 	<id column="eid" property="eid" />
		<result column="ename" property="ename" />
		<result column="age" property="age" />
		<result column="sex" property="sex" />
		<!-- 
			select：分步查询的SQL的id，即接口的全限定名.方法名或namespace.sql的id
			column:将哪一个属性作为分步查询的条件(因为sql语句需要传入did参数) 
				注意：此条件必须是从数据库查询过的，即select eid,ename,age,sex,did from emp where eid = #{eid}查询过did
		-->
		<association property="dept" select="com.hr.mapper.DeptMapper.getDeptByDid" column="did"></association>
	 </resultMap>
	 
	<!-- Emp getEmpStep(String eid); -->
	<select id="getEmpStep" resultMap="empMapStep">
		select eid,ename,age,sex,did from emp where eid = #{eid}
	</select>
	
	<resultMap type="Dept" id="deptMap">
		<id column="did" property="did"/>
		<result column="dname" property="dname"/>
		<!-- 
			<collection>:处理一对多和多对多的关系
			DeptBean中设置了属性emps,所以property为emps; 
			ofType:emps集合中的类型，不需要指定javaType
		-->
		<collection property="emps" ofType="Emp">
			<id column="eid" property="eid" />
			<result column="ename" property="ename" />
			<result column="age" property="age" />
			<result column="sex" property="sex" />
		</collection>
	</resultMap>
	
	<!-- Dept getDeptEmpsByDid(String did); -->
	<select id="getDeptEmpsByDid" resultMap="deptMap">
		select d.did,d.dname,e.eid,e.ename,e.age,e.sex from dept d left join emp e on d.did = e.did where d.did = #{did}
	</select>
	
	<!-- 分步查询测试一对多 -->
	<!-- List<Emp> getEmpListByDid(String did); -->
	<select id="getEmpListByDid" resultType="Emp">
		select eid,ename,age,sex from emp where did = #{did}
	</select>
	<resultMap type="Dept" id="deptMapStep">
		<id column="did" property="did"/>
		<result column="dname" property="dname"/>
		<collection property="emps" select="com.hr.mapper.EmpDeptMapper.getEmpListByDid" column="did" fetchType="eager">
		</collection>
	</resultMap>
	<!-- Dept getOnlyDeptByDid(String did); -->
	<select id="getOnlyDeptByDid" resultMap="deptMapStep">
		select did,dname from dept where did = #{did}
	</select>
	
	
</mapper>